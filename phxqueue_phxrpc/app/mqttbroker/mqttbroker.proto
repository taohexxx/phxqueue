syntax = "proto3";

package phxqueue_phxrpc.mqttbroker;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "phxqueue/comm/proto/comm.proto";
import "phxrpc/rpc/phxrpc.proto";
import "phxqueue_phxrpc/app/logic/mqtt/mqtt.proto";


service MqttBroker {

    rpc MqttConnect(phxqueue_phxrpc.logic.mqtt.MqttConnectPb) returns (phxqueue_phxrpc.logic.mqtt.MqttConnackPb) {
        option(phxrpc.CmdID) = 2000011;
        option(phxrpc.OptString) = "l:";
        option(phxrpc.Usage) = "-l <client_identifier>";
    }

    rpc MqttPublish(phxqueue_phxrpc.logic.mqtt.MqttPublishPb) returns (google.protobuf.Empty) {
        option(phxrpc.CmdID) = 2000012;
        option(phxrpc.OptString) = "l:d:q:r:t:p:s:";
        option(phxrpc.Usage) = "-l <client_identifier> -d <dup> -q <qos> -r <retain> -t <topic_name> -p <packet_identifier> -s <string>";
    }

    rpc MqttPuback(phxqueue_phxrpc.logic.mqtt.MqttPubackPb) returns (google.protobuf.Empty) {
        option(phxrpc.CmdID) = 2000013;
        option(phxrpc.OptString) = "l:p:";
        option(phxrpc.Usage) = "-l <client_identifier> -p <packet_identifier>";
    }

    rpc MqttPubrec(phxqueue_phxrpc.logic.mqtt.MqttPubrecPb) returns (google.protobuf.Empty) {
        option(phxrpc.CmdID) = 2000014;
        option(phxrpc.OptString) = "";
        option(phxrpc.Usage) = "";
    }

    rpc MqttPubrel(phxqueue_phxrpc.logic.mqtt.MqttPubrelPb) returns (google.protobuf.Empty) {
        option(phxrpc.CmdID) = 2000015;
        option(phxrpc.OptString) = "";
        option(phxrpc.Usage) = "";
    }

    rpc MqttPubcomp(phxqueue_phxrpc.logic.mqtt.MqttPubcompPb) returns (google.protobuf.Empty) {
        option(phxrpc.CmdID) = 2000016;
        option(phxrpc.OptString) = "";
        option(phxrpc.Usage) = "";
    }

    rpc MqttSubscribe(phxqueue_phxrpc.logic.mqtt.MqttSubscribePb) returns (phxqueue_phxrpc.logic.mqtt.MqttSubackPb) {
        option(phxrpc.CmdID) = 2000017;
        option(phxrpc.OptString) = "l:p:t:q:";
        option(phxrpc.Usage) = "-l <client_identifier> -p <packet_identifier> -t <topic_filters> -q <qoss>";
    }

    rpc MqttUnsubscribe(phxqueue_phxrpc.logic.mqtt.MqttUnsubscribePb) returns (phxqueue_phxrpc.logic.mqtt.MqttUnsubackPb) {
        option(phxrpc.CmdID) = 2000018;
        option(phxrpc.OptString) = "l:p:t:";
        option(phxrpc.Usage) = "-l <client_identifier> -p <packet_identifier> -t <topic_filters>";
    }

    rpc MqttPing(phxqueue_phxrpc.logic.mqtt.MqttPingreqPb) returns (phxqueue_phxrpc.logic.mqtt.MqttPingrespPb) {
        option(phxrpc.CmdID) = 2000019;
        option(phxrpc.OptString) = "l:";
        option(phxrpc.Usage) = "-l <client_identifier>";
    }

    rpc MqttDisconnect(phxqueue_phxrpc.logic.mqtt.MqttDisconnectPb) returns (google.protobuf.Empty) {
        option(phxrpc.CmdID) = 2000020;
        option(phxrpc.OptString) = "l:";
        option(phxrpc.Usage) = "-l <client_identifier>";
    }

    rpc HttpPublish(phxqueue_phxrpc.logic.mqtt.HttpPublishPb) returns (phxqueue_phxrpc.logic.mqtt.HttpPubackPb) {
        option(phxrpc.CmdID) = 2000031;
        option(phxrpc.OptString) = "e:d:q:r:t:p:s:";
        option(phxrpc.Usage) = "-e <session_id_hex> -d <dup> -q <qos> -r <retain> -t <topic_name> -p <packet_identifier> -s <string>";
    }

}

