/* mqttbroker_service_impl.h

 Generated by phxrpc_pb2service from mqttbroker.proto

*/

#pragma once

#include "phxqueue/comm.h"
#include "phxqueue_phxrpc/app/logic/mqtt.h"
#include "phxrpc/network.h"

#include "phxrpc_mqttbroker_service.h"


class MqttBrokerServerConfig;


namespace phxqueue_phxrpc {


namespace logic {

namespace comm {


class TableMgr;


}  // namespace comm

}  // namespace logic


namespace mqttbroker {


class MqttSession;
class ServerMgr;


}  // namespace mqttbroker


}  // namespace phxqueue_phxrpc


typedef struct tagServiceArgs {
    const MqttBrokerServerConfig *config;
    phxqueue_phxrpc::mqttbroker::ServerMgr *server_mgr;
} ServiceArgs_t;


class MqttBrokerServiceImpl : public MqttBrokerService {
  public:
    MqttBrokerServiceImpl(ServiceArgs_t &app_args,
            phxrpc::UThreadEpollScheduler *worker_uthread_scheduler,
            const uint64_t session_id);
    virtual ~MqttBrokerServiceImpl() override;

    virtual int PHXEcho(const google::protobuf::StringValue &req,
                        google::protobuf::StringValue *resp) override;
    virtual int HttpPublish(const phxqueue_phxrpc::logic::mqtt::HttpPublishPb &req,
                            phxqueue_phxrpc::logic::mqtt::HttpPubackPb *resp) override;
    virtual int MqttConnect(const phxqueue_phxrpc::logic::mqtt::MqttConnectPb &req,
                            phxqueue_phxrpc::logic::mqtt::MqttConnackPb *resp) override;
    virtual int MqttPublish(const phxqueue_phxrpc::logic::mqtt::MqttPublishPb &req,
                            google::protobuf::Empty *resp) override;
    virtual int MqttPuback(const phxqueue_phxrpc::logic::mqtt::MqttPubackPb &req,
                           google::protobuf::Empty *resp) override;
    virtual int MqttPubrec(const phxqueue_phxrpc::logic::mqtt::MqttPubrecPb &req,
                           google::protobuf::Empty *resp) override;
    virtual int MqttPubrel(const phxqueue_phxrpc::logic::mqtt::MqttPubrelPb &req,
                           google::protobuf::Empty *resp) override;
    virtual int MqttPubcomp(const phxqueue_phxrpc::logic::mqtt::MqttPubcompPb &req,
                            google::protobuf::Empty *resp) override;
    virtual int MqttSubscribe(const phxqueue_phxrpc::logic::mqtt::MqttSubscribePb &req,
                              phxqueue_phxrpc::logic::mqtt::MqttSubackPb *resp) override;
    virtual int MqttUnsubscribe(const phxqueue_phxrpc::logic::mqtt::MqttUnsubscribePb &req,
                                phxqueue_phxrpc::logic::mqtt::MqttUnsubackPb *resp) override;
    virtual int MqttPing(const phxqueue_phxrpc::logic::mqtt::MqttPingreqPb &req,
                         phxqueue_phxrpc::logic::mqtt::MqttPingrespPb *resp) override;
    virtual int MqttDisconnect(const phxqueue_phxrpc::logic::mqtt::MqttDisconnectPb &req,
                               google::protobuf::Empty *resp) override;

  private:
    phxqueue::comm::RetCode CheckSession(phxqueue_phxrpc::mqttbroker::MqttSession *&mqtt_session);
    phxqueue::comm::RetCode FinishSession();

    ServiceArgs_t &args_;
    phxrpc::UThreadEpollScheduler *worker_uthread_scheduler_{nullptr};
    uint64_t session_id_{0uLL};
    std::unique_ptr<phxqueue_phxrpc::logic::mqtt::TableMgr> table_mgr_;
};

