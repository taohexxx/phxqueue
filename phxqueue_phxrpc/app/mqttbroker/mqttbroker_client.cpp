/* mqttbroker_client.cpp

 Generated by phxrpc_pb2client from mqttbroker.proto

*/



#include "mqttbroker_client.h"

#include <cstdlib>
#include <memory>
#include <mutex>

#include "phxrpc/http.h"
#include "phxrpc/rpc.h"

#include "mqtt/mqtt_msg_handler_factory.h"
#include "phxrpc_mqttbroker_stub.h"
#include "resource_pool.h"


using namespace phxqueue_phxrpc::logic::mqtt;
using namespace std;


static phxrpc::ClientConfig global_mqttbrokerclient_config_;
static phxrpc::ClientMonitorPtr global_mqttbrokerclient_monitor_;


bool MqttBrokerClient::Init(const char *config_file) {
    return global_mqttbrokerclient_config_.Read(config_file);
}

const char *MqttBrokerClient::GetPackageName() {
    const char *ret = global_mqttbrokerclient_config_.GetPackageName();
    if (strlen(ret) == 0) {
        ret = "mqttbroker";
    }
    return ret;
}

MqttBrokerClient::MqttBrokerClient() {
    static mutex monitor_mutex;
    if (!global_mqttbrokerclient_monitor_.get()) {
        monitor_mutex.lock();
        if (!global_mqttbrokerclient_monitor_.get()) {
            global_mqttbrokerclient_monitor_ = phxrpc::MonitorFactory::GetFactory()->
                    CreateClientMonitor(GetPackageName());
        }
        global_mqttbrokerclient_config_.SetClientMonitor(global_mqttbrokerclient_monitor_);
        monitor_mutex.unlock();
    }
}

MqttBrokerClient::~MqttBrokerClient() {
}

// http protocol

int MqttBrokerClient::PHXEcho(const google::protobuf::StringValue &req,
                              google::protobuf::StringValue *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), http_msg_factory);
        int ret{stub.PHXEcho(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::HttpPublish(const HttpPublishPb &req, HttpPubackPb *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), http_msg_factory);
        int ret{stub.HttpPublish(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

// mqtt protocol

int MqttBrokerClient::MqttConnect(const MqttConnectPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttConnect(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttConnectWithConnack(const MqttConnectPb &req, MqttConnackPb *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttConnectWithConnack(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttPublish(const MqttPublishPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttPublish(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttPublishWithPuback(const MqttPublishPb &req, MqttPubackPb *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttPublishWithPuback(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttPuback(const MqttPubackPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttPuback(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttPubrec(const MqttPubrecPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttPubrec(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttPubrel(const MqttPubrelPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttPubrel(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttPubcomp(const MqttPubcompPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttPubcomp(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttSubscribe(const MqttSubscribePb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttSubscribe(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttSubscribeWithSuback(const MqttSubscribePb &req, MqttSubackPb *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttSubscribeWithSuback(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttUnsubscribe(const MqttUnsubscribePb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttUnsubscribe(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttUnsubscribeWithUnsuback(const MqttUnsubscribePb &req, MqttUnsubackPb *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttUnsubscribeWithUnsuback(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttPing(const MqttPingreqPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttPing(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttPingWithPingresp(const MqttPingreqPb &req, MqttPingrespPb *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttPingWithPingresp(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int MqttBrokerClient::MqttDisconnect(const MqttDisconnectPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep{global_mqttbrokerclient_config_.GetRandom()};

    if (ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::BlockTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::BlockTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(socket.get(), ep->ip, ep->port,
                    global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
                    *(global_mqttbrokerclient_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());
        }

        phxqueue_phxrpc::mqttbroker::MqttMessageHandlerFactory mqtt_msg_factory;
        MqttBrokerStub stub(*(socket.get()), *(global_mqttbrokerclient_monitor_.get()), mqtt_msg_factory);
        int ret{stub.MqttDisconnect(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

// proto

phxqueue::comm::RetCode
MqttBrokerClient::ProtoHttpPublish(const HttpPublishPb &req, HttpPubackPb *resp) {
    const char *ip{req.addr().ip().c_str()};
    const int port{req.addr().port()};

    phxrpc::BlockTcpStream socket;
    bool open_ret{phxrpc::PhxrpcTcpUtils::Open(&socket, ip, port,
            global_mqttbrokerclient_config_.GetConnectTimeoutMS(), nullptr, 0,
            *(global_mqttbrokerclient_monitor_.get()))};
    if (!open_ret) {
        QLErr("Open %s:%d err %d", ip, port, open_ret);

        return phxqueue::comm::RetCode::RET_ERR_SYS;
    }
    socket.SetTimeout(global_mqttbrokerclient_config_.GetSocketTimeoutMS());

    phxrpc::HttpMessageHandlerFactory http_msg_factory;
    MqttBrokerStub stub(socket, *(global_mqttbrokerclient_monitor_.get()), http_msg_factory);
    int ret{stub.HttpPublish(req, resp)};
    if (0 > ret) {
        QLErr("HttpPublish err %d", ret);
    }
    return static_cast<phxqueue::comm::RetCode>(ret);
}

