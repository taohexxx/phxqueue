/* phxrpc_mqttbroker_stub.h

 Generated by phxrpc_pb2client from mqttbroker.proto

 Please DO NOT edit unless you know exactly what you are doing.

*/

#pragma once

#include "phxqueue_phxrpc/app/logic/mqtt.h"

#include "mqttbroker.pb.h"


namespace phxrpc {


class BaseMessageHandlerFactory;
class BaseTcpStream;
class ClientMonitor;


}


class MqttBrokerStub {
  public:
    MqttBrokerStub(phxrpc::BaseTcpStream &socket, phxrpc::ClientMonitor &client_monitor,
                   phxrpc::BaseMessageHandlerFactory &msg_handler_factory);
    virtual ~MqttBrokerStub();

    void set_keep_alive(const bool keep_alive);

    // http protocol
    int PHXEcho(const google::protobuf::StringValue &req,
                google::protobuf::StringValue *resp);
    int HttpPublish(const phxqueue_phxrpc::logic::mqtt::HttpPublishPb &req,
                    phxqueue_phxrpc::logic::mqtt::HttpPubackPb *resp);

    // mqtt protocol
    int MqttConnect(const phxqueue_phxrpc::logic::mqtt::MqttConnectPb &req,
                    phxqueue_phxrpc::logic::mqtt::MqttConnackPb *resp);
    int MqttPublish(const phxqueue_phxrpc::logic::mqtt::MqttPublishPb &req,
                    google::protobuf::Empty *resp);
    int MqttPuback(const phxqueue_phxrpc::logic::mqtt::MqttPubackPb &req,
                   google::protobuf::Empty *resp);
    int MqttPubrec(const phxqueue_phxrpc::logic::mqtt::MqttPubrecPb &req,
                   google::protobuf::Empty *resp);
    int MqttPubrel(const phxqueue_phxrpc::logic::mqtt::MqttPubrelPb &req,
                   google::protobuf::Empty *resp);
    int MqttPubcomp(const phxqueue_phxrpc::logic::mqtt::MqttPubcompPb &req,
                    google::protobuf::Empty *resp);
    int MqttSubscribe(const phxqueue_phxrpc::logic::mqtt::MqttSubscribePb &req,
                      phxqueue_phxrpc::logic::mqtt::MqttSubackPb *resp);
    int MqttUnsubscribe(const phxqueue_phxrpc::logic::mqtt::MqttUnsubscribePb &req,
                        phxqueue_phxrpc::logic::mqtt::MqttUnsubackPb *resp);
    int MqttPing(const phxqueue_phxrpc::logic::mqtt::MqttPingreqPb &req,
                 phxqueue_phxrpc::logic::mqtt::MqttPingrespPb *resp);
    int MqttDisconnect(const phxqueue_phxrpc::logic::mqtt::MqttDisconnectPb &req,
                       google::protobuf::Empty *resp);

  private:
    phxrpc::BaseTcpStream &socket_;
    phxrpc::ClientMonitor &client_monitor_;
    phxrpc::BaseMessageHandlerFactory &msg_handler_factory_;
    bool keep_alive_;
};

