/* search_client.cpp

 Generated by phxrpc_pb2client from search.proto

*/



#include "search_client_uthread.h"

#include <cstdlib>
#include <memory>
#include <mutex>

#include "phxrpc/http.h"
#include "phxrpc/rpc.h"

#include "phxrpc_search_stub.h"
#include "resource_pool.h"


using namespace phxqueue_phxrpc::logic::mqtt;
using namespace std;


static phxrpc::ClientConfig global_searchclientuthread_config_;
static phxrpc::ClientMonitorPtr global_searchclientuthread_monitor_;


bool SearchClientUThread::Init(const char *config_file) {
    return global_searchclientuthread_config_.Read(config_file);
}

const char *SearchClientUThread::GetPackageName() {
    const char *ret{global_searchclientuthread_config_.GetPackageName()};
    if (strlen(ret) == 0) {
        ret = "search";
    }
    return ret;
}

SearchClientUThread::SearchClientUThread(phxrpc::UThreadEpollScheduler *uthread_scheduler) {
    uthread_scheduler_ = uthread_scheduler;
    static mutex monitor_mutex;
    if (!global_searchclientuthread_monitor_.get()) {
        monitor_mutex.lock();
        if (!global_searchclientuthread_monitor_.get()) {
            global_searchclientuthread_monitor_ = phxrpc::MonitorFactory::GetFactory()->
                    CreateClientMonitor(GetPackageName());
        }
        global_searchclientuthread_config_.SetClientMonitor(global_searchclientuthread_monitor_);
        monitor_mutex.unlock();
    }
}

SearchClientUThread::~SearchClientUThread() {
}

// http protocol

int SearchClientUThread::PHXEcho(const google::protobuf::StringValue &req,
                                 google::protobuf::StringValue *resp) {
    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();

    if (uthread_scheduler_ && ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::UThreadTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::UThreadTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, socket.get(), ep->ip, ep->port,
                    global_searchclientuthread_config_.GetConnectTimeoutMS(),
                    *(global_searchclientuthread_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        SearchStub stub(*(socket.get()), *(global_searchclientuthread_monitor_.get()), http_msg_factory);
        int ret{stub.PHXEcho(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int SearchClientUThread::HttpPublish(const HttpPublishPb &req, HttpPubackPb *resp) {
    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();

    if (uthread_scheduler_ && ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::UThreadTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::UThreadTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, socket.get(), ep->ip, ep->port,
                    global_searchclientuthread_config_.GetConnectTimeoutMS(),
                    *(global_searchclientuthread_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        SearchStub stub(*(socket.get()), *(global_searchclientuthread_monitor_.get()), http_msg_factory);
        int ret{stub.HttpPublish(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

// mqtt protocol

int SearchClientUThread::MqttConnect(const MqttConnectPb &req, MqttConnackPb *resp) {
    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();

    if (uthread_scheduler_ && ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::UThreadTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::UThreadTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, socket.get(), ep->ip, ep->port,
                    global_searchclientuthread_config_.GetConnectTimeoutMS(),
                    *(global_searchclientuthread_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        SearchStub stub(*(socket.get()), *(global_searchclientuthread_monitor_.get()), http_msg_factory);
        int ret{stub.MqttConnect(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int SearchClientUThread::MqttPublish(const MqttPublishPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();

    if (uthread_scheduler_ && ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::UThreadTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::UThreadTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, socket.get(), ep->ip, ep->port,
                    global_searchclientuthread_config_.GetConnectTimeoutMS(),
                    *(global_searchclientuthread_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        SearchStub stub(*(socket.get()), *(global_searchclientuthread_monitor_.get()), http_msg_factory);
        int ret{stub.MqttPublish(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int SearchClientUThread::MqttPuback(const MqttPubackPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();

    if (uthread_scheduler_ && ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::UThreadTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::UThreadTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, socket.get(), ep->ip, ep->port,
                    global_searchclientuthread_config_.GetConnectTimeoutMS(),
                    *(global_searchclientuthread_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        SearchStub stub(*(socket.get()), *(global_searchclientuthread_monitor_.get()), http_msg_factory);
        int ret{stub.MqttPuback(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int SearchClientUThread::MqttPubrec(const MqttPubrecPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();

    if (uthread_scheduler_ && ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::UThreadTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::UThreadTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, socket.get(), ep->ip, ep->port,
                    global_searchclientuthread_config_.GetConnectTimeoutMS(),
                    *(global_searchclientuthread_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        SearchStub stub(*(socket.get()), *(global_searchclientuthread_monitor_.get()), http_msg_factory);
        int ret{stub.MqttPubrec(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int SearchClientUThread::MqttPubrel(const MqttPubrelPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();

    if (uthread_scheduler_ && ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::UThreadTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::UThreadTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, socket.get(), ep->ip, ep->port,
                    global_searchclientuthread_config_.GetConnectTimeoutMS(),
                    *(global_searchclientuthread_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        SearchStub stub(*(socket.get()), *(global_searchclientuthread_monitor_.get()), http_msg_factory);
        int ret{stub.MqttPubrel(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int SearchClientUThread::MqttPubcomp(const MqttPubcompPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();

    if (uthread_scheduler_ && ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::UThreadTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::UThreadTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, socket.get(), ep->ip, ep->port,
                    global_searchclientuthread_config_.GetConnectTimeoutMS(),
                    *(global_searchclientuthread_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        SearchStub stub(*(socket.get()), *(global_searchclientuthread_monitor_.get()), http_msg_factory);
        int ret{stub.MqttPubcomp(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int SearchClientUThread::MqttSubscribe(const MqttSubscribePb &req, MqttSubackPb *resp) {
    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();

    if (uthread_scheduler_ && ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::UThreadTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::UThreadTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, socket.get(), ep->ip, ep->port,
                    global_searchclientuthread_config_.GetConnectTimeoutMS(),
                    *(global_searchclientuthread_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        SearchStub stub(*(socket.get()), *(global_searchclientuthread_monitor_.get()), http_msg_factory);
        int ret{stub.MqttSubscribe(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int SearchClientUThread::MqttUnsubscribe(const MqttUnsubscribePb &req, MqttUnsubackPb *resp) {
    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();

    if (uthread_scheduler_ && ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::UThreadTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::UThreadTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, socket.get(), ep->ip, ep->port,
                    global_searchclientuthread_config_.GetConnectTimeoutMS(),
                    *(global_searchclientuthread_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        SearchStub stub(*(socket.get()), *(global_searchclientuthread_monitor_.get()), http_msg_factory);
        int ret{stub.MqttUnsubscribe(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int SearchClientUThread::MqttPing(const MqttPingreqPb &req, MqttPingrespPb *resp) {
    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();

    if (uthread_scheduler_ && ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::UThreadTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::UThreadTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, socket.get(), ep->ip, ep->port,
                    global_searchclientuthread_config_.GetConnectTimeoutMS(),
                    *(global_searchclientuthread_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        SearchStub stub(*(socket.get()), *(global_searchclientuthread_monitor_.get()), http_msg_factory);
        int ret{stub.MqttPing(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

int SearchClientUThread::MqttDisconnect(const MqttDisconnectPb &req, google::protobuf::Empty *resp) {
    const phxrpc::Endpoint_t *ep = global_searchclientuthread_config_.GetRandom();

    if (uthread_scheduler_ && ep) {
        auto &&socket_pool(ResourcePool<uint64_t, phxrpc::UThreadTcpStream>::GetInstance());
        // TODO:
        uint64_t key(ep->port);
        auto socket = move(socket_pool->Get(key));

        if (nullptr == socket.get()) {
            socket.reset(new phxrpc::UThreadTcpStream());

            bool open_ret{phxrpc::PhxrpcTcpUtils::Open(uthread_scheduler_, socket.get(), ep->ip, ep->port,
                    global_searchclientuthread_config_.GetConnectTimeoutMS(),
                    *(global_searchclientuthread_monitor_.get()))};
            if (!open_ret) {
                phxrpc::log(LOG_ERR, "Open %s:%d err %d", ep->ip, ep->port, open_ret);

                return -1;
            }
            socket->SetTimeout(global_searchclientuthread_config_.GetSocketTimeoutMS());
        }

        phxrpc::HttpMessageHandlerFactory http_msg_factory;
        SearchStub stub(*(socket.get()), *(global_searchclientuthread_monitor_.get()), http_msg_factory);
        int ret{stub.MqttDisconnect(req, resp)};
        socket_pool->Put(key, socket);

        return ret;
    }

    return -1;
}

