/* phxrpc_mqttbroker_dispatcher.h

 Generated by phxrpc_pb2service from mqttbroker.proto

 Please DO NOT edit unless you know exactly what you are doing.

*/

#include "phxrpc_mqttbroker_dispatcher.h"

#include <errno.h>

#include "phxrpc/http.h"
#include "phxrpc/file.h"

#include "mqttbroker.pb.h"
#include "phxrpc_mqttbroker_service.h"


MqttBrokerDispatcher::MqttBrokerDispatcher(MqttBrokerService &service, phxrpc::DispatcherArgs_t *dispatcher_args)
        : service_(service), dispatcher_args_(dispatcher_args) {
}

MqttBrokerDispatcher::~MqttBrokerDispatcher() {
}

const phxrpc::BaseDispatcher<MqttBrokerDispatcher>::URIFuncMap &MqttBrokerDispatcher::GetURIFuncMap() {
    static phxrpc::BaseDispatcher<MqttBrokerDispatcher>::URIFuncMap uri_func_map = {
        {"/phxqueue_phxrpc.mqttbroker/PHXEcho", &MqttBrokerDispatcher::PHXEcho},
        {"/phxqueue_phxrpc.mqttbroker/PhxMqttConnect", &MqttBrokerDispatcher::PhxMqttConnect},
        {"/phxqueue_phxrpc.mqttbroker/PhxMqttPublish", &MqttBrokerDispatcher::PhxMqttPublish},
        {"/phxqueue_phxrpc.mqttbroker/PhxMqttPuback", &MqttBrokerDispatcher::PhxMqttPuback},
        {"/phxqueue_phxrpc.mqttbroker/PhxMqttPubrec", &MqttBrokerDispatcher::PhxMqttPubrec},
        {"/phxqueue_phxrpc.mqttbroker/PhxMqttPubrel", &MqttBrokerDispatcher::PhxMqttPubrel},
        {"/phxqueue_phxrpc.mqttbroker/PhxMqttPubcomp", &MqttBrokerDispatcher::PhxMqttPubcomp},
        {"/phxqueue_phxrpc.mqttbroker/PhxMqttSubscribe", &MqttBrokerDispatcher::PhxMqttSubscribe},
        {"/phxqueue_phxrpc.mqttbroker/PhxMqttUnsubscribe", &MqttBrokerDispatcher::PhxMqttUnsubscribe},
        {"/phxqueue_phxrpc.mqttbroker/PhxMqttPing", &MqttBrokerDispatcher::PhxMqttPing},
        {"/phxqueue_phxrpc.mqttbroker/PhxMqttDisconnect", &MqttBrokerDispatcher::PhxMqttDisconnect},
        {"/phxqueue_phxrpc.mqttbroker/PhxHttpPublish", &MqttBrokerDispatcher::PhxHttpPublish}};
    return uri_func_map;
}

int MqttBrokerDispatcher::PHXEcho(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(-1, "PHXEcho", 1);

    int ret{0};

    google::protobuf::StringValue req_pb;
    google::protobuf::StringValue resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb err %d", static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PHXEcho(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        phxrpc::ReturnCode ret_code{resp->FromPb(resp_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "FromPb err %d", static_cast<int>(ret_code));

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PHXEcho = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::PhxMqttConnect(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000011, "PhxMqttConnect", 1);

    int ret{0};

    phxqueue_phxrpc::mqttbroker::MqttConnectPb req_pb;
    phxqueue_phxrpc::mqttbroker::MqttConnackPb resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb err %d", static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttConnect(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        phxrpc::ReturnCode ret_code{resp->FromPb(resp_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "FromPb err %d", static_cast<int>(ret_code));

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PhxMqttConnect = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::PhxMqttPublish(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000012, "PhxMqttPublish", 1);

    int ret{0};

    phxqueue_phxrpc::mqttbroker::MqttPublishPb req_pb;
    google::protobuf::Empty resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb err %d", static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttPublish(req_pb, &resp_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PhxMqttPublish = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::PhxMqttPuback(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000013, "PhxMqttPuback", 1);

    int ret{0};

    phxqueue_phxrpc::mqttbroker::MqttPubackPb req_pb;
    google::protobuf::Empty resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb err %d", static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttPuback(req_pb, &resp_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PhxMqttPuback = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::PhxMqttPubrec(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000014, "PhxMqttPubrec", 1);

    int ret{0};

    phxqueue_phxrpc::mqttbroker::MqttPubrecPb req_pb;
    google::protobuf::Empty resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb err %d", static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttPubrec(req_pb, &resp_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PhxMqttPubrec = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::PhxMqttPubrel(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000015, "PhxMqttPubrel", 1);

    int ret{0};

    phxqueue_phxrpc::mqttbroker::MqttPubrelPb req_pb;
    google::protobuf::Empty resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb err %d", static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttPubrel(req_pb, &resp_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PhxMqttPubrel = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::PhxMqttPubcomp(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000016, "PhxMqttPubcomp", 1);

    int ret{0};

    phxqueue_phxrpc::mqttbroker::MqttPubcompPb req_pb;
    google::protobuf::Empty resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb err %d", static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttPubcomp(req_pb, &resp_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PhxMqttPubcomp = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::PhxMqttSubscribe(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000017, "PhxMqttSubscribe", 1);

    int ret{0};

    phxqueue_phxrpc::mqttbroker::MqttSubscribePb req_pb;
    phxqueue_phxrpc::mqttbroker::MqttSubackPb resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb err %d", static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttSubscribe(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        phxrpc::ReturnCode ret_code{resp->FromPb(resp_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "FromPb err %d", static_cast<int>(ret_code));

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PhxMqttSubscribe = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::PhxMqttUnsubscribe(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000018, "PhxMqttUnsubscribe", 1);

    int ret{0};

    phxqueue_phxrpc::mqttbroker::MqttUnsubscribePb req_pb;
    phxqueue_phxrpc::mqttbroker::MqttUnsubackPb resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb err %d", static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttUnsubscribe(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        phxrpc::ReturnCode ret_code{resp->FromPb(resp_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "FromPb err %d", static_cast<int>(ret_code));

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PhxMqttUnsubscribe = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::PhxMqttPing(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000019, "PhxMqttPing", 1);

    int ret{0};

    phxqueue_phxrpc::mqttbroker::MqttPingreqPb req_pb;
    phxqueue_phxrpc::mqttbroker::MqttPingrespPb resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb err %d", static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttPing(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        phxrpc::ReturnCode ret_code{resp->FromPb(resp_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "FromPb err %d", static_cast<int>(ret_code));

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PhxMqttPing = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::PhxMqttDisconnect(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000020, "PhxMqttDisconnect", 1);

    int ret{0};

    phxqueue_phxrpc::mqttbroker::MqttDisconnectPb req_pb;
    google::protobuf::Empty resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb err %d", static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttDisconnect(req_pb, &resp_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PhxMqttDisconnect = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::PhxHttpPublish(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000031, "PhxHttpPublish", 1);

    int ret{0};

    phxqueue_phxrpc::mqttbroker::HttpPublishPb req_pb;
    phxqueue_phxrpc::mqttbroker::HttpPubackPb resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb err %d", static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxHttpPublish(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        phxrpc::ReturnCode ret_code{resp->FromPb(resp_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "FromPb err %d", static_cast<int>(ret_code));

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PhxHttpPublish = %d", ret);

    return ret;
}

