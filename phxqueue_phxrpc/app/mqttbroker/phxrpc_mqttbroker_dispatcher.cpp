/* phxrpc_mqttbroker_dispatcher.h

 Generated by phxrpc_pb2service from mqttbroker.proto

 Please DO NOT edit unless you know exactly what you are doing.

*/

#include "phxrpc_mqttbroker_dispatcher.h"

#include <errno.h>

#include "phxrpc/http.h"
#include "phxrpc/file.h"

#include "mqttbroker.pb.h"
#include "phxrpc_mqttbroker_service.h"


MqttBrokerDispatcher::MqttBrokerDispatcher(MqttBrokerService &service, phxrpc::DispatcherArgs_t *dispatcher_args)
        : service_(service), dispatcher_args_(dispatcher_args) {
}

MqttBrokerDispatcher::~MqttBrokerDispatcher() {
}

const phxrpc::BaseDispatcher<MqttBrokerDispatcher>::URIFuncMap &MqttBrokerDispatcher::GetURIFuncMap() {
    static phxrpc::BaseDispatcher<MqttBrokerDispatcher>::URIFuncMap uri_func_map = {
        {"/phxqueue_phxrpc/mqttbroker/PHXEcho", &MqttBrokerDispatcher::PHXEcho},
        {"/phxqueue_phxrpc/mqttbroker/HttpPublish", &MqttBrokerDispatcher::HttpPublish},
        {"/phxqueue_phxrpc/mqttbroker/MqttConnect", &MqttBrokerDispatcher::MqttConnect},
        {"/phxqueue_phxrpc/mqttbroker/MqttPublish", &MqttBrokerDispatcher::MqttPublish},
        {"/phxqueue_phxrpc/mqttbroker/MqttPuback", &MqttBrokerDispatcher::MqttPuback},
        {"/phxqueue_phxrpc/mqttbroker/MqttPubrec", &MqttBrokerDispatcher::MqttPubrec},
        {"/phxqueue_phxrpc/mqttbroker/MqttPubrel", &MqttBrokerDispatcher::MqttPubrel},
        {"/phxqueue_phxrpc/mqttbroker/MqttPubcomp", &MqttBrokerDispatcher::MqttPubcomp},
        {"/phxqueue_phxrpc/mqttbroker/MqttSubscribe", &MqttBrokerDispatcher::MqttSubscribe},
        {"/phxqueue_phxrpc/mqttbroker/MqttUnsubscribe", &MqttBrokerDispatcher::MqttUnsubscribe},
        {"/phxqueue_phxrpc/mqttbroker/MqttPing", &MqttBrokerDispatcher::MqttPing},
        {"/phxqueue_phxrpc/mqttbroker/MqttDisconnect", &MqttBrokerDispatcher::MqttDisconnect}};
    return uri_func_map;
}

int MqttBrokerDispatcher::PHXEcho(const phxrpc::BaseRequest &req,
                                  phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(-1, "PHXEcho", 1);

    int ret{-1};

    google::protobuf::StringValue req_pb;
    google::protobuf::StringValue resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PHXEcho(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        if (0 != resp->FromPb(resp_pb)) {
            phxrpc::log(LOG_ERR, "FromPb err %d", ret);

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PHXEcho = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::HttpPublish(const phxrpc::BaseRequest &req,
                                      phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000031, "HttpPublish", 1);

    int ret{-1};

    phxqueue_phxrpc::logic::mqtt::HttpPublishPb req_pb;
    phxqueue_phxrpc::logic::mqtt::HttpPubackPb resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.HttpPublish(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        if (0 != resp->FromPb(resp_pb)) {
            phxrpc::log(LOG_ERR, "FromPb err %d", ret);

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: HttpPublish = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::MqttConnect(const phxrpc::BaseRequest &req,
                                      phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000011, "MqttConnect", 1);

    int ret{-1};

    phxqueue_phxrpc::logic::mqtt::MqttConnectPb req_pb;
    phxqueue_phxrpc::logic::mqtt::MqttConnackPb resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.MqttConnect(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        if (0 != resp->FromPb(resp_pb)) {
            phxrpc::log(LOG_ERR, "FromPb err %d", ret);

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: MqttConnect = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::MqttPublish(const phxrpc::BaseRequest &req,
                                      phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000012, "MqttPublish", 1);

    int ret{-1};

    phxqueue_phxrpc::logic::mqtt::MqttPublishPb req_pb;
    google::protobuf::Empty resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.MqttPublish(req_pb, &resp_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: MqttPublish = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::MqttPuback(const phxrpc::BaseRequest &req,
                                     phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000013, "MqttPuback", 1);

    int ret{-1};

    phxqueue_phxrpc::logic::mqtt::MqttPubackPb req_pb;
    google::protobuf::Empty resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.MqttPuback(req_pb, &resp_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: MqttPuback = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::MqttPubrec(const phxrpc::BaseRequest &req,
                                     phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000014, "MqttPubrec", 1);

    int ret{-1};

    phxqueue_phxrpc::logic::mqtt::MqttPubrecPb req_pb;
    google::protobuf::Empty resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.MqttPubrec(req_pb, &resp_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: MqttPubrec = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::MqttPubrel(const phxrpc::BaseRequest &req,
                                     phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000015, "MqttPubrel", 1);

    int ret{-1};

    phxqueue_phxrpc::logic::mqtt::MqttPubrelPb req_pb;
    google::protobuf::Empty resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.MqttPubrel(req_pb, &resp_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: MqttPubrel = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::MqttPubcomp(const phxrpc::BaseRequest &req,
                                      phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000016, "MqttPubcomp", 1);

    int ret{-1};

    phxqueue_phxrpc::logic::mqtt::MqttPubcompPb req_pb;
    google::protobuf::Empty resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.MqttPubcomp(req_pb, &resp_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: MqttPubcomp = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::MqttSubscribe(const phxrpc::BaseRequest &req,
                                        phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000017, "MqttSubscribe", 1);

    int ret{-1};

    phxqueue_phxrpc::logic::mqtt::MqttSubscribePb req_pb;
    phxqueue_phxrpc::logic::mqtt::MqttSubackPb resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.MqttSubscribe(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        if (0 != resp->FromPb(resp_pb)) {
            phxrpc::log(LOG_ERR, "FromPb err %d", ret);

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: MqttSubscribe = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::MqttUnsubscribe(const phxrpc::BaseRequest &req,
                                          phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000018, "MqttUnsubscribe", 1);

    int ret{-1};

    phxqueue_phxrpc::logic::mqtt::MqttUnsubscribePb req_pb;
    phxqueue_phxrpc::logic::mqtt::MqttUnsubackPb resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.MqttUnsubscribe(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        if (0 != resp->FromPb(resp_pb)) {
            phxrpc::log(LOG_ERR, "FromPb err %d", ret);

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: MqttUnsubscribe = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::MqttPing(const phxrpc::BaseRequest &req,
                                   phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000019, "MqttPing", 1);

    int ret{-1};

    phxqueue_phxrpc::logic::mqtt::MqttPingreqPb req_pb;
    phxqueue_phxrpc::logic::mqtt::MqttPingrespPb resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.MqttPing(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        if (0 != resp->FromPb(resp_pb)) {
            phxrpc::log(LOG_ERR, "FromPb err %d", ret);

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: MqttPing = %d", ret);

    return ret;
}

int MqttBrokerDispatcher::MqttDisconnect(const phxrpc::BaseRequest &req,
                                         phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(2000020, "MqttDisconnect", 1);

    int ret{-1};

    phxqueue_phxrpc::logic::mqtt::MqttDisconnectPb req_pb;
    google::protobuf::Empty resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.MqttDisconnect(req_pb, &resp_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: MqttDisconnect = %d", ret);

    return ret;
}

